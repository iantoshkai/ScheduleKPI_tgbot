from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton
import logging
from pymongo import MongoClient
from schedule_kpi import config, func

connect_db = MongoClient('localhost', 27017)
db_schedule = connect_db[config.name_db]

logging.basicConfig(level=logging.INFO)
def create_main_markup():
    b1 = KeyboardButton('üìú–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
    b6 = KeyboardButton('–Ø–∫–∞ –∑–∞—Ä–∞–∑ –ø–∞—Ä–∞‚ùì')
    b2 = KeyboardButton('üìú–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
    b3 = KeyboardButton('üìã–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å')
    b4 = KeyboardButton('üìö–ü–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥')
    b5 = KeyboardButton('‚úè–í–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É')
    b7 = KeyboardButton("üìû–ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º")

    main_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(b1,b6,b2).row(b3,b4).add(b5).add(b7)
    return main_markup

bot = Bot(token=config.token)
dp = Dispatcher(bot)
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = db_schedule.users
    if user.find_one({'chat_id':'{}'.format(message.chat.id)}) == None:
        user.insert_one({'chat_id':'{}'.format(message.chat.id),
                          'full_name':'{}'.format(message.from_user.full_name),
                          'username':'{}'.format(message.from_user.username)})
    else:
        None
    await message.reply("–ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è, {}!üëãüèª\n"
                        "–¶–µ –±–æ—Ç –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—Éüòé\n"
                        "–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—èüòä".format(message.from_user.full_name),
                                                                            reply_markup=create_main_markup())
@dp.message_handler(regexp='üìú–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
async def chose_group(message: types.Message):
    group = db_schedule.users.find_one({ "chat_id" : "{}".format(message.chat.id)})['group']
    msg = func.today(group, func.day_number(), func.week_number())
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
@dp.message_handler(regexp='–Ø–∫–∞ –∑–∞—Ä–∞–∑ –ø–∞—Ä–∞‚ùì')
async def chose_group(message: types.Message):
    group = db_schedule.users.find_one({ "chat_id" : "{}".format(message.chat.id)})['group']
    msg = func.get_now_lesson(group, func.day_number(), func.week_number())
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
@dp.message_handler(regexp='üìú–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
async def chose_group(message: types.Message):
    group = db_schedule.users.find_one({ "chat_id" : "{}".format(message.chat.id)})['group']
    msg = func.tommorow(group, func.day_number(), func.week_number())
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
@dp.message_handler(regexp='üìã–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å')
async def chose_group(message: types.Message):
    group = db_schedule.users.find_one({ "chat_id" : "{}".format(message.chat.id)})['group']
    msg = func.get_one_week(group, func.week_number())
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
@dp.message_handler(regexp='üìö–ü–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥')
async def chose_group(message: types.Message):
    group = db_schedule.users.find_one({ "chat_id" : "{}".format(message.chat.id)})['group']
    week1 = func.get_one_week(group, 1)
    week2 = func.get_one_week(group, 2)
    msg = "<i>–¢–∏–∂–¥–µ–Ω—å 1</i>\n"+week1+"<i>–¢–∏–∂–¥–µ–Ω—å 2</i>\n"+week2
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
@dp.message_handler(regexp='‚úè–í–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É')
async def chose_group(message: types.Message):

    await message.reply("–©–æ–± —è –∑–∞–ø–∞–º'—è—Ç–∞–≤ —Ç–≤–æ—é –≥—Ä—É–ø—É\n"
                        "–ø–∏—à–∏: /set –Ω–æ–º–µ—Ä_–≥—Ä—É–ø–∏\n"
                        "–ü—Ä–∏–∫–ª–∞–¥: <code>/set i–∫-52</code>",parse_mode='HTML')
@dp.message_handler(commands=['set'])
async def set_group(message: types.Message):

    try:
        _, group = message.text.split(' ')
        groups = db_schedule.groups.find_one({ "group_full_name" : "{}".format(group)})['group_id']
        user = db_schedule.users
        user.update_one({'chat_id':'{}'.format(message.chat.id)},{"$set":{'group':'{}'.format(groups)}})
        await message.reply("–í—Å–µ –∫—Ä—É—Ç–æ, –∑–∞–ø–∞–º'—è—Ç–∞–≤:)")
    except:
        await message.reply("‚ùå–£–ø—Å, –≥—Ä—É–ø–∞ –Ω–µ —ñ—Å–Ω—É—î‚ùå")
@dp.message_handler(regexp="üìû–ó–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º")
async def chose_group(message: types.Message):
    msg = "–ó–Ω–∞–π—à–æ–≤ –±–∞–≥–∏/–ø–æ–º–∏–ª–∫–∏ –≤ –±–æ—Ç—ñ?\n–¢–æ–±—ñ —Å—é–¥–∏: @kpigeek"
    await bot.send_message(message.chat.id,msg,parse_mode='HTML')
if __name__ == '__main__':
    executor.start_polling(dp)
